/*
* generated by Xtext
*/
grammar InternalVD;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package visualizationDesignLanguage.DSL.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package visualizationDesignLanguage.DSL.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import visualizationDesignLanguage.DSL.services.VDGrammarAccess;

}

@parser::members {

 	private VDGrammarAccess grammarAccess;
 	
    public InternalVDParser(TokenStream input, VDGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Dashboard";	
   	}
   	
   	@Override
   	protected VDGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDashboard
entryRuleDashboard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDashboardRule()); }
	 iv_ruleDashboard=ruleDashboard 
	 { $current=$iv_ruleDashboard.current; } 
	 EOF 
;

// Rule Dashboard
ruleDashboard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Dashboard' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDashboardAccess().getDashboardKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDashboardAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDashboardRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDashboardAccess().getColonKeyword_2());
    }
	otherlv_3='Visualizations :' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDashboardAccess().getVisualizationsKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDashboardAccess().getVisualizationsVisualizationParserRuleCall_4_0()); 
	    }
		lv_visualizations_4_0=ruleVisualization		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDashboardRule());
	        }
       		add(
       			$current, 
       			"visualizations",
        		lv_visualizations_4_0, 
        		"Visualization");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDashboardAccess().getVisualizationsVisualizationParserRuleCall_5_0()); 
	    }
		lv_visualizations_5_0=ruleVisualization		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDashboardRule());
	        }
       		add(
       			$current, 
       			"visualizations",
        		lv_visualizations_5_0, 
        		"Visualization");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='Positioning :' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDashboardAccess().getPositioningKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDashboardAccess().getWindowsWindowParserRuleCall_7_0()); 
	    }
		lv_windows_7_0=ruleWindow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDashboardRule());
	        }
       		add(
       			$current, 
       			"windows",
        		lv_windows_7_0, 
        		"Window");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDashboardAccess().getWindowsWindowParserRuleCall_8_0()); 
	    }
		lv_windows_8_0=ruleWindow		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDashboardRule());
	        }
       		add(
       			$current, 
       			"windows",
        		lv_windows_8_0, 
        		"Window");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleVisualization
entryRuleVisualization returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVisualizationRule()); }
	 iv_ruleVisualization=ruleVisualization 
	 { $current=$iv_ruleVisualization.current; } 
	 EOF 
;

// Rule Visualization
ruleVisualization returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVisualizationAccess().getNameEStringParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVisualizationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='shows' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVisualizationAccess().getShowsKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVisualizationAccess().getConcernsWhatQualifierParserRuleCall_1_1_0()); 
	    }
		lv_concerns_2_0=ruleWhatQualifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVisualizationRule());
	        }
       		add(
       			$current, 
       			"concerns",
        		lv_concerns_2_0, 
        		"WhatQualifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVisualizationAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVisualizationAccess().getConcernsWhatQualifierParserRuleCall_1_2_1_0()); 
	    }
		lv_concerns_4_0=ruleWhatQualifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVisualizationRule());
	        }
       		add(
       			$current, 
       			"concerns",
        		lv_concerns_4_0, 
        		"WhatQualifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='of' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getVisualizationAccess().getOfKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVisualizationAccess().getDisplaysSourceParserRuleCall_3_0()); 
	    }
		lv_displays_6_0=ruleSource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVisualizationRule());
	        }
       		add(
       			$current, 
       			"displays",
        		lv_displays_6_0, 
        		"Source");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getVisualizationAccess().getSemicolonKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVisualizationAccess().getDisplaysSourceParserRuleCall_4_1_0()); 
	    }
		lv_displays_8_0=ruleSource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVisualizationRule());
	        }
       		add(
       			$current, 
       			"displays",
        		lv_displays_8_0, 
        		"Source");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getVisualizationAccess().getSemicolonKeyword_5());
    }
)?)
;





// Entry rule entryRuleWhatQualifier
entryRuleWhatQualifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhatQualifierRule()); }
	 iv_ruleWhatQualifier=ruleWhatQualifier 
	 { $current=$iv_ruleWhatQualifier.current; } 
	 EOF 
;

// Rule WhatQualifier
ruleWhatQualifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhatQualifierAccess().getConcernTaxonomyEnumRuleCall_0()); 
	    }
		lv_concern_0_0=ruleTaxonomy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhatQualifierRule());
	        }
       		set(
       			$current, 
       			"concern",
        		lv_concern_0_0, 
        		"Taxonomy");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleSource
entryRuleSource returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSourceRule()); }
	 iv_ruleSource=ruleSource 
	 { $current=$iv_ruleSource.current; } 
	 EOF 
;

// Rule Source
ruleSource returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSourceAccess().getNameEStringParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSourceRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='of type' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSourceAccess().getOfTypeKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSourceAccess().getTypeEStringParserRuleCall_1_1_0()); 
	    }
		lv_type_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSourceRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_3='locate at' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSourceAccess().getLocateAtKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSourceAccess().getLocationEStringParserRuleCall_2_1_0()); 
	    }
		lv_location_4_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSourceRule());
	        }
       		set(
       			$current, 
       			"location",
        		lv_location_4_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='displayed as' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSourceAccess().getDisplayedAsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSourceAccess().getConcernsHowQualifierParserRuleCall_3_1_0()); 
	    }
		lv_concerns_6_0=ruleHowQualifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSourceRule());
	        }
       		add(
       			$current, 
       			"concerns",
        		lv_concerns_6_0, 
        		"HowQualifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSourceAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSourceAccess().getConcernsHowQualifierParserRuleCall_3_2_1_0()); 
	    }
		lv_concerns_8_0=ruleHowQualifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSourceRule());
	        }
       		add(
       			$current, 
       			"concerns",
        		lv_concerns_8_0, 
        		"HowQualifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleHowQualifier
entryRuleHowQualifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHowQualifierRule()); }
	 iv_ruleHowQualifier=ruleHowQualifier 
	 { $current=$iv_ruleHowQualifier.current; } 
	 EOF 
;

// Rule HowQualifier
ruleHowQualifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getHowQualifierAccess().getIconParserRuleCall_0()); 
    }
    this_Icon_0=ruleIcon
    { 
        $current = $this_Icon_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getHowQualifierAccess().getColorizationParserRuleCall_1()); 
    }
    this_Colorization_1=ruleColorization
    { 
        $current = $this_Colorization_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getHowQualifierAccess().getPropertyParserRuleCall_2()); 
    }
    this_Property_2=ruleProperty
    { 
        $current = $this_Property_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getHowQualifierAccess().getThresholdParserRuleCall_3()); 
    }
    this_Threshold_3=ruleThreshold
    { 
        $current = $this_Threshold_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleWindow
entryRuleWindow returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWindowRule()); }
	 iv_ruleWindow=ruleWindow 
	 { $current=$iv_ruleWindow.current; } 
	 EOF 
;

// Rule Window
ruleWindow returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='view' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWindowAccess().getViewKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWindowAccess().getNameEStringParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWindowRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWindowAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWindowAccess().getOrganizesContainerParserRuleCall_3_0()); 
	    }
		lv_organizes_3_0=ruleContainer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWindowRule());
	        }
       		add(
       			$current, 
       			"organizes",
        		lv_organizes_3_0, 
        		"Container");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='   |   ' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWindowAccess().getSpaceSpaceSpaceVerticalLineSpaceSpaceSpaceKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWindowAccess().getOrganizesContainerParserRuleCall_4_1_0()); 
	    }
		lv_organizes_5_0=ruleContainer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWindowRule());
	        }
       		add(
       			$current, 
       			"organizes",
        		lv_organizes_5_0, 
        		"Container");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleContainer
entryRuleContainer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContainerRule()); }
	 iv_ruleContainer=ruleContainer 
	 { $current=$iv_ruleContainer.current; } 
	 EOF 
;

// Rule Container
ruleContainer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	otherlv_0='Column' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getContainerAccess().getColumnKeyword_0_0_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getContainerAccess().getColumnAction_0_0_1(),
            $current);
    }
))
    |(	otherlv_2='Line' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getContainerAccess().getLineKeyword_0_1_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getContainerAccess().getLineAction_0_1_1(),
            $current);
    }
)))(	otherlv_4='sized' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getContainerAccess().getSizedKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerAccess().getPonderationEIntParserRuleCall_1_1_0()); 
	    }
		lv_ponderation_5_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerRule());
	        }
       		set(
       			$current, 
       			"ponderation",
        		lv_ponderation_5_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6=': [' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getContainerAccess().getColonSpaceLeftSquareBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerAccess().getContainsCellParserRuleCall_3_0()); 
	    }
		lv_contains_7_0=ruleCell		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerRule());
	        }
       		add(
       			$current, 
       			"contains",
        		lv_contains_7_0, 
        		"Cell");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getContainerAccess().getSemicolonKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainerAccess().getContainsCellParserRuleCall_4_1_0()); 
	    }
		lv_contains_9_0=ruleCell		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainerRule());
	        }
       		add(
       			$current, 
       			"contains",
        		lv_contains_9_0, 
        		"Cell");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_10=']' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getContainerAccess().getRightSquareBracketKeyword_5());
    }
)
;





// Entry rule entryRuleCell
entryRuleCell returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCellRule()); }
	 iv_ruleCell=ruleCell 
	 { $current=$iv_ruleCell.current; } 
	 EOF 
;

// Rule Cell
ruleCell returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCellRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getCellAccess().getWrapsVisualizationCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleIcon
entryRuleIcon returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIconRule()); }
	 iv_ruleIcon=ruleIcon 
	 { $current=$iv_ruleIcon.current; } 
	 EOF 
;

// Rule Icon
ruleIcon returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getIconAccess().getIconAction_0(),
            $current);
    }
)	otherlv_1='Icon' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIconAccess().getIconKeyword_1());
    }
)
;





// Entry rule entryRuleColorization
entryRuleColorization returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getColorizationRule()); }
	 iv_ruleColorization=ruleColorization 
	 { $current=$iv_ruleColorization.current; } 
	 EOF 
;

// Rule Colorization
ruleColorization returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getColorizationAccess().getColorizationAction_0(),
            $current);
    }
)	otherlv_1='Color' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getColorizationAccess().getColorKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getColorizationAccess().getColorEStringParserRuleCall_2_0()); 
	    }
		lv_color_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getColorizationRule());
	        }
       		set(
       			$current, 
       			"color",
        		lv_color_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getValueDataPropertyEnumRuleCall_0()); 
	    }
		lv_value_0_0=ruleDataProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"DataProperty");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleThreshold
entryRuleThreshold returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getThresholdRule()); }
	 iv_ruleThreshold=ruleThreshold 
	 { $current=$iv_ruleThreshold.current; } 
	 EOF 
;

// Rule Threshold
ruleThreshold returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getThresholdAccess().getThresholdAction_0(),
            $current);
    }
)	otherlv_1='Threshold (' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getThresholdAccess().getThresholdKeyword_1());
    }
(	otherlv_2='min' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getThresholdAccess().getMinKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getThresholdAccess().getMinEIntParserRuleCall_2_1_0()); 
	    }
		lv_min_3_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThresholdRule());
	        }
       		set(
       			$current, 
       			"min",
        		lv_min_3_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_4='max' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getThresholdAccess().getMaxKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getThresholdAccess().getMaxEIntParserRuleCall_3_1_0()); 
	    }
		lv_max_5_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getThresholdRule());
	        }
       		set(
       			$current, 
       			"max",
        		lv_max_5_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getThresholdAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Rule DataProperty
ruleDataProperty returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Continuous' 
	{
        $current = grammarAccess.getDataPropertyAccess().getContinuousEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDataPropertyAccess().getContinuousEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Discrete' 
	{
        $current = grammarAccess.getDataPropertyAccess().getDiscreteEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDataPropertyAccess().getDiscreteEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Scalar' 
	{
        $current = grammarAccess.getDataPropertyAccess().getScalarEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getDataPropertyAccess().getScalarEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Structural' 
	{
        $current = grammarAccess.getDataPropertyAccess().getStructuralEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getDataPropertyAccess().getStructuralEnumLiteralDeclaration_3()); 
    }
));



// Rule Taxonomy
ruleTaxonomy returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Proportion' 
	{
        $current = grammarAccess.getTaxonomyAccess().getProportionEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTaxonomyAccess().getProportionEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Location' 
	{
        $current = grammarAccess.getTaxonomyAccess().getLocationEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTaxonomyAccess().getLocationEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Comparison' 
	{
        $current = grammarAccess.getTaxonomyAccess().getComparisonEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTaxonomyAccess().getComparisonEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Part_to_a_whole' 
	{
        $current = grammarAccess.getTaxonomyAccess().getPart_to_a_wholeEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getTaxonomyAccess().getPart_to_a_wholeEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='Relationship' 
	{
        $current = grammarAccess.getTaxonomyAccess().getRelationshipEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getTaxonomyAccess().getRelationshipEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='Over_time' 
	{
        $current = grammarAccess.getTaxonomyAccess().getOver_timeEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getTaxonomyAccess().getOver_timeEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='Distribution' 
	{
        $current = grammarAccess.getTaxonomyAccess().getDistributionEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getTaxonomyAccess().getDistributionEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='Hierarchy' 
	{
        $current = grammarAccess.getTaxonomyAccess().getHierarchyEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getTaxonomyAccess().getHierarchyEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='Reference_tool' 
	{
        $current = grammarAccess.getTaxonomyAccess().getReference_toolEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getTaxonomyAccess().getReference_toolEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='Range' 
	{
        $current = grammarAccess.getTaxonomyAccess().getRangeEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getTaxonomyAccess().getRangeEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='Pattern' 
	{
        $current = grammarAccess.getTaxonomyAccess().getPatternEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getTaxonomyAccess().getPatternEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='Extremum' 
	{
        $current = grammarAccess.getTaxonomyAccess().getExtremumEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getTaxonomyAccess().getExtremumEnumLiteralDeclaration_11()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


