/*
* generated by Xtext
*/
package visualizationDesignLanguage.DSL.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class VDGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DashboardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dashboard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDashboardKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cVisualizationsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cVisualizationsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cVisualizationsVisualizationParserRuleCall_4_0 = (RuleCall)cVisualizationsAssignment_4.eContents().get(0);
		private final Assignment cVisualizationsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cVisualizationsVisualizationParserRuleCall_5_0 = (RuleCall)cVisualizationsAssignment_5.eContents().get(0);
		private final Keyword cPositioningKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cWindowsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cWindowsWindowParserRuleCall_7_0 = (RuleCall)cWindowsAssignment_7.eContents().get(0);
		private final Assignment cWindowsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cWindowsWindowParserRuleCall_8_0 = (RuleCall)cWindowsAssignment_8.eContents().get(0);
		
		//Dashboard:
		//	"Dashboard" name=EString ":" "Visualizations :" visualizations+=Visualization visualizations+=Visualization*
		//	"Positioning :" windows+=Window windows+=Window*;
		public ParserRule getRule() { return rule; }

		//"Dashboard" name=EString ":" "Visualizations :" visualizations+=Visualization visualizations+=Visualization*
		//"Positioning :" windows+=Window windows+=Window*
		public Group getGroup() { return cGroup; }

		//"Dashboard"
		public Keyword getDashboardKeyword_0() { return cDashboardKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//"Visualizations :"
		public Keyword getVisualizationsKeyword_3() { return cVisualizationsKeyword_3; }

		//visualizations+=Visualization
		public Assignment getVisualizationsAssignment_4() { return cVisualizationsAssignment_4; }

		//Visualization
		public RuleCall getVisualizationsVisualizationParserRuleCall_4_0() { return cVisualizationsVisualizationParserRuleCall_4_0; }

		//visualizations+=Visualization*
		public Assignment getVisualizationsAssignment_5() { return cVisualizationsAssignment_5; }

		//Visualization
		public RuleCall getVisualizationsVisualizationParserRuleCall_5_0() { return cVisualizationsVisualizationParserRuleCall_5_0; }

		//"Positioning :"
		public Keyword getPositioningKeyword_6() { return cPositioningKeyword_6; }

		//windows+=Window
		public Assignment getWindowsAssignment_7() { return cWindowsAssignment_7; }

		//Window
		public RuleCall getWindowsWindowParserRuleCall_7_0() { return cWindowsWindowParserRuleCall_7_0; }

		//windows+=Window*
		public Assignment getWindowsAssignment_8() { return cWindowsAssignment_8; }

		//Window
		public RuleCall getWindowsWindowParserRuleCall_8_0() { return cWindowsWindowParserRuleCall_8_0; }
	}

	public class VisualizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Visualization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cShowsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cConcernsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConcernsWhatQualifierParserRuleCall_1_1_0 = (RuleCall)cConcernsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cConcernsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cConcernsWhatQualifierParserRuleCall_1_2_1_0 = (RuleCall)cConcernsAssignment_1_2_1.eContents().get(0);
		private final Keyword cOfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDisplaysAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDisplaysSourceParserRuleCall_3_0 = (RuleCall)cDisplaysAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDisplaysAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cDisplaysSourceParserRuleCall_4_1_0 = (RuleCall)cDisplaysAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Visualization:
		//	name=EString ("shows" concerns+=WhatQualifier ("," concerns+=WhatQualifier)*)? "of" displays+=Source (";"
		//	displays+=Source)* ";"?;
		public ParserRule getRule() { return rule; }

		//name=EString ("shows" concerns+=WhatQualifier ("," concerns+=WhatQualifier)*)? "of" displays+=Source (";"
		//displays+=Source)* ";"?
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//("shows" concerns+=WhatQualifier ("," concerns+=WhatQualifier)*)?
		public Group getGroup_1() { return cGroup_1; }

		//"shows"
		public Keyword getShowsKeyword_1_0() { return cShowsKeyword_1_0; }

		//concerns+=WhatQualifier
		public Assignment getConcernsAssignment_1_1() { return cConcernsAssignment_1_1; }

		//WhatQualifier
		public RuleCall getConcernsWhatQualifierParserRuleCall_1_1_0() { return cConcernsWhatQualifierParserRuleCall_1_1_0; }

		//("," concerns+=WhatQualifier)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//concerns+=WhatQualifier
		public Assignment getConcernsAssignment_1_2_1() { return cConcernsAssignment_1_2_1; }

		//WhatQualifier
		public RuleCall getConcernsWhatQualifierParserRuleCall_1_2_1_0() { return cConcernsWhatQualifierParserRuleCall_1_2_1_0; }

		//"of"
		public Keyword getOfKeyword_2() { return cOfKeyword_2; }

		//displays+=Source
		public Assignment getDisplaysAssignment_3() { return cDisplaysAssignment_3; }

		//Source
		public RuleCall getDisplaysSourceParserRuleCall_3_0() { return cDisplaysSourceParserRuleCall_3_0; }

		//(";" displays+=Source)*
		public Group getGroup_4() { return cGroup_4; }

		//";"
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }

		//displays+=Source
		public Assignment getDisplaysAssignment_4_1() { return cDisplaysAssignment_4_1; }

		//Source
		public RuleCall getDisplaysSourceParserRuleCall_4_1_0() { return cDisplaysSourceParserRuleCall_4_1_0; }

		//";"?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class WhatQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhatQualifier");
		private final Assignment cConcernAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConcernTaxonomyEnumRuleCall_0 = (RuleCall)cConcernAssignment.eContents().get(0);
		
		//WhatQualifier:
		//	concern=Taxonomy;
		public ParserRule getRule() { return rule; }

		//concern=Taxonomy
		public Assignment getConcernAssignment() { return cConcernAssignment; }

		//Taxonomy
		public RuleCall getConcernTaxonomyEnumRuleCall_0() { return cConcernTaxonomyEnumRuleCall_0; }
	}

	public class SourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Source");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOfTypeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeEStringParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLocateAtKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLocationAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLocationEStringParserRuleCall_2_1_0 = (RuleCall)cLocationAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDisplayedAsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConcernsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cConcernsHowQualifierParserRuleCall_3_1_0 = (RuleCall)cConcernsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cConcernsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cConcernsHowQualifierParserRuleCall_3_2_1_0 = (RuleCall)cConcernsAssignment_3_2_1.eContents().get(0);
		
		//Source:
		//	name=EString ("of type" type=EString)? ("locate at" location=EString)? ("displayed as" concerns+=HowQualifier (","
		//	concerns+=HowQualifier)*)?;
		public ParserRule getRule() { return rule; }

		//name=EString ("of type" type=EString)? ("locate at" location=EString)? ("displayed as" concerns+=HowQualifier (","
		//concerns+=HowQualifier)*)?
		public Group getGroup() { return cGroup; }

		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }

		//("of type" type=EString)?
		public Group getGroup_1() { return cGroup_1; }

		//"of type"
		public Keyword getOfTypeKeyword_1_0() { return cOfTypeKeyword_1_0; }

		//type=EString
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//EString
		public RuleCall getTypeEStringParserRuleCall_1_1_0() { return cTypeEStringParserRuleCall_1_1_0; }

		//("locate at" location=EString)?
		public Group getGroup_2() { return cGroup_2; }

		//"locate at"
		public Keyword getLocateAtKeyword_2_0() { return cLocateAtKeyword_2_0; }

		//location=EString
		public Assignment getLocationAssignment_2_1() { return cLocationAssignment_2_1; }

		//EString
		public RuleCall getLocationEStringParserRuleCall_2_1_0() { return cLocationEStringParserRuleCall_2_1_0; }

		//("displayed as" concerns+=HowQualifier ("," concerns+=HowQualifier)*)?
		public Group getGroup_3() { return cGroup_3; }

		//"displayed as"
		public Keyword getDisplayedAsKeyword_3_0() { return cDisplayedAsKeyword_3_0; }

		//concerns+=HowQualifier
		public Assignment getConcernsAssignment_3_1() { return cConcernsAssignment_3_1; }

		//HowQualifier
		public RuleCall getConcernsHowQualifierParserRuleCall_3_1_0() { return cConcernsHowQualifierParserRuleCall_3_1_0; }

		//("," concerns+=HowQualifier)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//concerns+=HowQualifier
		public Assignment getConcernsAssignment_3_2_1() { return cConcernsAssignment_3_2_1; }

		//HowQualifier
		public RuleCall getConcernsHowQualifierParserRuleCall_3_2_1_0() { return cConcernsHowQualifierParserRuleCall_3_2_1_0; }
	}

	public class HowQualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HowQualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIconParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cColorizationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPropertyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cThresholdParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//HowQualifier:
		//	Icon | Colorization | Property | Threshold;
		public ParserRule getRule() { return rule; }

		//Icon | Colorization | Property | Threshold
		public Alternatives getAlternatives() { return cAlternatives; }

		//Icon
		public RuleCall getIconParserRuleCall_0() { return cIconParserRuleCall_0; }

		//Colorization
		public RuleCall getColorizationParserRuleCall_1() { return cColorizationParserRuleCall_1; }

		//Property
		public RuleCall getPropertyParserRuleCall_2() { return cPropertyParserRuleCall_2; }

		//Threshold
		public RuleCall getThresholdParserRuleCall_3() { return cThresholdParserRuleCall_3; }
	}

	public class WindowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Window");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cViewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cOrganizesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOrganizesContainerParserRuleCall_3_0 = (RuleCall)cOrganizesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSpaceSpaceSpaceVerticalLineSpaceSpaceSpaceKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOrganizesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOrganizesContainerParserRuleCall_4_1_0 = (RuleCall)cOrganizesAssignment_4_1.eContents().get(0);
		
		//Window:
		//	"view" name=EString ":" organizes+=Container ("   |   " organizes+=Container)*;
		public ParserRule getRule() { return rule; }

		//"view" name=EString ":" organizes+=Container ("   |   " organizes+=Container)*
		public Group getGroup() { return cGroup; }

		//"view"
		public Keyword getViewKeyword_0() { return cViewKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//organizes+=Container
		public Assignment getOrganizesAssignment_3() { return cOrganizesAssignment_3; }

		//Container
		public RuleCall getOrganizesContainerParserRuleCall_3_0() { return cOrganizesContainerParserRuleCall_3_0; }

		//("   |   " organizes+=Container)*
		public Group getGroup_4() { return cGroup_4; }

		//"   |   "
		public Keyword getSpaceSpaceSpaceVerticalLineSpaceSpaceSpaceKeyword_4_0() { return cSpaceSpaceSpaceVerticalLineSpaceSpaceSpaceKeyword_4_0; }

		//organizes+=Container
		public Assignment getOrganizesAssignment_4_1() { return cOrganizesAssignment_4_1; }

		//Container
		public RuleCall getOrganizesContainerParserRuleCall_4_1_0() { return cOrganizesContainerParserRuleCall_4_1_0; }
	}

	public class ContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Container");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cColumnKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Action cColumnAction_0_0_1 = (Action)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cLineKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Action cLineAction_0_1_1 = (Action)cGroup_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSizedKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPonderationAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPonderationEIntParserRuleCall_1_1_0 = (RuleCall)cPonderationAssignment_1_1.eContents().get(0);
		private final Keyword cColonSpaceLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cContainsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cContainsCellParserRuleCall_3_0 = (RuleCall)cContainsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cContainsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cContainsCellParserRuleCall_4_1_0 = (RuleCall)cContainsAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Container:
		//	("Column" {Column} | "Line" {Line}) ("sized" ponderation=EInt)? ": [" contains+=Cell (";" contains+=Cell)* "]";
		public ParserRule getRule() { return rule; }

		//("Column" {Column} | "Line" {Line}) ("sized" ponderation=EInt)? ": [" contains+=Cell (";" contains+=Cell)* "]"
		public Group getGroup() { return cGroup; }

		//"Column" {Column} | "Line" {Line}
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"Column" {Column}
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"Column"
		public Keyword getColumnKeyword_0_0_0() { return cColumnKeyword_0_0_0; }

		//{Column}
		public Action getColumnAction_0_0_1() { return cColumnAction_0_0_1; }

		//"Line" {Line}
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"Line"
		public Keyword getLineKeyword_0_1_0() { return cLineKeyword_0_1_0; }

		//{Line}
		public Action getLineAction_0_1_1() { return cLineAction_0_1_1; }

		//("sized" ponderation=EInt)?
		public Group getGroup_1() { return cGroup_1; }

		//"sized"
		public Keyword getSizedKeyword_1_0() { return cSizedKeyword_1_0; }

		//ponderation=EInt
		public Assignment getPonderationAssignment_1_1() { return cPonderationAssignment_1_1; }

		//EInt
		public RuleCall getPonderationEIntParserRuleCall_1_1_0() { return cPonderationEIntParserRuleCall_1_1_0; }

		//": ["
		public Keyword getColonSpaceLeftSquareBracketKeyword_2() { return cColonSpaceLeftSquareBracketKeyword_2; }

		//contains+=Cell
		public Assignment getContainsAssignment_3() { return cContainsAssignment_3; }

		//Cell
		public RuleCall getContainsCellParserRuleCall_3_0() { return cContainsCellParserRuleCall_3_0; }

		//(";" contains+=Cell)*
		public Group getGroup_4() { return cGroup_4; }

		//";"
		public Keyword getSemicolonKeyword_4_0() { return cSemicolonKeyword_4_0; }

		//contains+=Cell
		public Assignment getContainsAssignment_4_1() { return cContainsAssignment_4_1; }

		//Cell
		public RuleCall getContainsCellParserRuleCall_4_1_0() { return cContainsCellParserRuleCall_4_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}

	public class CellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cell");
		private final Assignment cWrapsAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cWrapsVisualizationCrossReference_0 = (CrossReference)cWrapsAssignment.eContents().get(0);
		private final RuleCall cWrapsVisualizationIDTerminalRuleCall_0_1 = (RuleCall)cWrapsVisualizationCrossReference_0.eContents().get(1);
		
		//Cell:
		//	wraps=[Visualization];
		public ParserRule getRule() { return rule; }

		//wraps=[Visualization]
		public Assignment getWrapsAssignment() { return cWrapsAssignment; }

		//[Visualization]
		public CrossReference getWrapsVisualizationCrossReference_0() { return cWrapsVisualizationCrossReference_0; }

		//ID
		public RuleCall getWrapsVisualizationIDTerminalRuleCall_0_1() { return cWrapsVisualizationIDTerminalRuleCall_0_1; }
	}

	public class IconElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Icon");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIconAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIconKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Icon:
		//	{Icon} "Icon";
		public ParserRule getRule() { return rule; }

		//{Icon} "Icon"
		public Group getGroup() { return cGroup; }

		//{Icon}
		public Action getIconAction_0() { return cIconAction_0; }

		//"Icon"
		public Keyword getIconKeyword_1() { return cIconKeyword_1; }
	}

	public class ColorizationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Colorization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColorizationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cColorEStringParserRuleCall_2_0 = (RuleCall)cColorAssignment_2.eContents().get(0);
		
		//Colorization:
		//	{Colorization} "Color" color=EString;
		public ParserRule getRule() { return rule; }

		//{Colorization} "Color" color=EString
		public Group getGroup() { return cGroup; }

		//{Colorization}
		public Action getColorizationAction_0() { return cColorizationAction_0; }

		//"Color"
		public Keyword getColorKeyword_1() { return cColorKeyword_1; }

		//color=EString
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }

		//EString
		public RuleCall getColorEStringParserRuleCall_2_0() { return cColorEStringParserRuleCall_2_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDataPropertyEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Property:
		//	value=DataProperty;
		public ParserRule getRule() { return rule; }

		//value=DataProperty
		public Assignment getValueAssignment() { return cValueAssignment; }

		//DataProperty
		public RuleCall getValueDataPropertyEnumRuleCall_0() { return cValueDataPropertyEnumRuleCall_0; }
	}

	public class ThresholdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Threshold");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cThresholdAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cThresholdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cMinKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMinAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMinEIntParserRuleCall_2_1_0 = (RuleCall)cMinAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMaxKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMaxAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMaxEIntParserRuleCall_3_1_0 = (RuleCall)cMaxAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Threshold:
		//	{Threshold} "Threshold (" ("min" min=EInt)? ("max" max=EInt)? ")";
		public ParserRule getRule() { return rule; }

		//{Threshold} "Threshold (" ("min" min=EInt)? ("max" max=EInt)? ")"
		public Group getGroup() { return cGroup; }

		//{Threshold}
		public Action getThresholdAction_0() { return cThresholdAction_0; }

		//"Threshold ("
		public Keyword getThresholdKeyword_1() { return cThresholdKeyword_1; }

		//("min" min=EInt)?
		public Group getGroup_2() { return cGroup_2; }

		//"min"
		public Keyword getMinKeyword_2_0() { return cMinKeyword_2_0; }

		//min=EInt
		public Assignment getMinAssignment_2_1() { return cMinAssignment_2_1; }

		//EInt
		public RuleCall getMinEIntParserRuleCall_2_1_0() { return cMinEIntParserRuleCall_2_1_0; }

		//("max" max=EInt)?
		public Group getGroup_3() { return cGroup_3; }

		//"max"
		public Keyword getMaxKeyword_3_0() { return cMaxKeyword_3_0; }

		//max=EInt
		public Assignment getMaxAssignment_3_1() { return cMaxAssignment_3_1; }

		//EInt
		public RuleCall getMaxEIntParserRuleCall_3_1_0() { return cMaxEIntParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	public class DataPropertyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DataProperty");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cContinuousEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cContinuousContinuousKeyword_0_0 = (Keyword)cContinuousEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDiscreteEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDiscreteDiscreteKeyword_1_0 = (Keyword)cDiscreteEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cScalarEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cScalarScalarKeyword_2_0 = (Keyword)cScalarEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cStructuralEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cStructuralStructuralKeyword_3_0 = (Keyword)cStructuralEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum DataProperty:
		//	Continuous | Discrete | Scalar | Structural;
		public EnumRule getRule() { return rule; }

		//Continuous | Discrete | Scalar | Structural
		public Alternatives getAlternatives() { return cAlternatives; }

		//Continuous
		public EnumLiteralDeclaration getContinuousEnumLiteralDeclaration_0() { return cContinuousEnumLiteralDeclaration_0; }

		//"Continuous"
		public Keyword getContinuousContinuousKeyword_0_0() { return cContinuousContinuousKeyword_0_0; }

		//Discrete
		public EnumLiteralDeclaration getDiscreteEnumLiteralDeclaration_1() { return cDiscreteEnumLiteralDeclaration_1; }

		//"Discrete"
		public Keyword getDiscreteDiscreteKeyword_1_0() { return cDiscreteDiscreteKeyword_1_0; }

		//Scalar
		public EnumLiteralDeclaration getScalarEnumLiteralDeclaration_2() { return cScalarEnumLiteralDeclaration_2; }

		//"Scalar"
		public Keyword getScalarScalarKeyword_2_0() { return cScalarScalarKeyword_2_0; }

		//Structural
		public EnumLiteralDeclaration getStructuralEnumLiteralDeclaration_3() { return cStructuralEnumLiteralDeclaration_3; }

		//"Structural"
		public Keyword getStructuralStructuralKeyword_3_0() { return cStructuralStructuralKeyword_3_0; }
	}

	public class TaxonomyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Taxonomy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cProportionEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cProportionProportionKeyword_0_0 = (Keyword)cProportionEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLocationEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLocationLocationKeyword_1_0 = (Keyword)cLocationEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cComparisonEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cComparisonComparisonKeyword_2_0 = (Keyword)cComparisonEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPart_to_a_wholeEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPart_to_a_wholePart_to_a_wholeKeyword_3_0 = (Keyword)cPart_to_a_wholeEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cRelationshipEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cRelationshipRelationshipKeyword_4_0 = (Keyword)cRelationshipEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cOver_timeEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cOver_timeOver_timeKeyword_5_0 = (Keyword)cOver_timeEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cDistributionEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cDistributionDistributionKeyword_6_0 = (Keyword)cDistributionEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cHierarchyEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cHierarchyHierarchyKeyword_7_0 = (Keyword)cHierarchyEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cReference_toolEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cReference_toolReference_toolKeyword_8_0 = (Keyword)cReference_toolEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cRangeEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cRangeRangeKeyword_9_0 = (Keyword)cRangeEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cPatternEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cPatternPatternKeyword_10_0 = (Keyword)cPatternEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cExtremumEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cExtremumExtremumKeyword_11_0 = (Keyword)cExtremumEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum Taxonomy:
		//	Proportion | Location | Comparison | Part_to_a_whole | Relationship | Over_time | Distribution | Hierarchy |
		//	Reference_tool | Range | Pattern | Extremum;
		public EnumRule getRule() { return rule; }

		//Proportion | Location | Comparison | Part_to_a_whole | Relationship | Over_time | Distribution | Hierarchy |
		//Reference_tool | Range | Pattern | Extremum
		public Alternatives getAlternatives() { return cAlternatives; }

		//Proportion
		public EnumLiteralDeclaration getProportionEnumLiteralDeclaration_0() { return cProportionEnumLiteralDeclaration_0; }

		//"Proportion"
		public Keyword getProportionProportionKeyword_0_0() { return cProportionProportionKeyword_0_0; }

		//Location
		public EnumLiteralDeclaration getLocationEnumLiteralDeclaration_1() { return cLocationEnumLiteralDeclaration_1; }

		//"Location"
		public Keyword getLocationLocationKeyword_1_0() { return cLocationLocationKeyword_1_0; }

		//Comparison
		public EnumLiteralDeclaration getComparisonEnumLiteralDeclaration_2() { return cComparisonEnumLiteralDeclaration_2; }

		//"Comparison"
		public Keyword getComparisonComparisonKeyword_2_0() { return cComparisonComparisonKeyword_2_0; }

		//Part_to_a_whole
		public EnumLiteralDeclaration getPart_to_a_wholeEnumLiteralDeclaration_3() { return cPart_to_a_wholeEnumLiteralDeclaration_3; }

		//"Part_to_a_whole"
		public Keyword getPart_to_a_wholePart_to_a_wholeKeyword_3_0() { return cPart_to_a_wholePart_to_a_wholeKeyword_3_0; }

		//Relationship
		public EnumLiteralDeclaration getRelationshipEnumLiteralDeclaration_4() { return cRelationshipEnumLiteralDeclaration_4; }

		//"Relationship"
		public Keyword getRelationshipRelationshipKeyword_4_0() { return cRelationshipRelationshipKeyword_4_0; }

		//Over_time
		public EnumLiteralDeclaration getOver_timeEnumLiteralDeclaration_5() { return cOver_timeEnumLiteralDeclaration_5; }

		//"Over_time"
		public Keyword getOver_timeOver_timeKeyword_5_0() { return cOver_timeOver_timeKeyword_5_0; }

		//Distribution
		public EnumLiteralDeclaration getDistributionEnumLiteralDeclaration_6() { return cDistributionEnumLiteralDeclaration_6; }

		//"Distribution"
		public Keyword getDistributionDistributionKeyword_6_0() { return cDistributionDistributionKeyword_6_0; }

		//Hierarchy
		public EnumLiteralDeclaration getHierarchyEnumLiteralDeclaration_7() { return cHierarchyEnumLiteralDeclaration_7; }

		//"Hierarchy"
		public Keyword getHierarchyHierarchyKeyword_7_0() { return cHierarchyHierarchyKeyword_7_0; }

		//Reference_tool
		public EnumLiteralDeclaration getReference_toolEnumLiteralDeclaration_8() { return cReference_toolEnumLiteralDeclaration_8; }

		//"Reference_tool"
		public Keyword getReference_toolReference_toolKeyword_8_0() { return cReference_toolReference_toolKeyword_8_0; }

		//Range
		public EnumLiteralDeclaration getRangeEnumLiteralDeclaration_9() { return cRangeEnumLiteralDeclaration_9; }

		//"Range"
		public Keyword getRangeRangeKeyword_9_0() { return cRangeRangeKeyword_9_0; }

		//Pattern
		public EnumLiteralDeclaration getPatternEnumLiteralDeclaration_10() { return cPatternEnumLiteralDeclaration_10; }

		//"Pattern"
		public Keyword getPatternPatternKeyword_10_0() { return cPatternPatternKeyword_10_0; }

		//Extremum
		public EnumLiteralDeclaration getExtremumEnumLiteralDeclaration_11() { return cExtremumEnumLiteralDeclaration_11; }

		//"Extremum"
		public Keyword getExtremumExtremumKeyword_11_0() { return cExtremumExtremumKeyword_11_0; }
	}
	
	private final DashboardElements pDashboard;
	private final VisualizationElements pVisualization;
	private final WhatQualifierElements pWhatQualifier;
	private final SourceElements pSource;
	private final HowQualifierElements pHowQualifier;
	private final WindowElements pWindow;
	private final ContainerElements pContainer;
	private final CellElements pCell;
	private final IconElements pIcon;
	private final ColorizationElements pColorization;
	private final PropertyElements pProperty;
	private final ThresholdElements pThreshold;
	private final DataPropertyElements unknownRuleDataProperty;
	private final TaxonomyElements unknownRuleTaxonomy;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VDGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDashboard = new DashboardElements();
		this.pVisualization = new VisualizationElements();
		this.pWhatQualifier = new WhatQualifierElements();
		this.pSource = new SourceElements();
		this.pHowQualifier = new HowQualifierElements();
		this.pWindow = new WindowElements();
		this.pContainer = new ContainerElements();
		this.pCell = new CellElements();
		this.pIcon = new IconElements();
		this.pColorization = new ColorizationElements();
		this.pProperty = new PropertyElements();
		this.pThreshold = new ThresholdElements();
		this.unknownRuleDataProperty = new DataPropertyElements();
		this.unknownRuleTaxonomy = new TaxonomyElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("visualizationDesignLanguage.DSL.VD".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Dashboard:
	//	"Dashboard" name=EString ":" "Visualizations :" visualizations+=Visualization visualizations+=Visualization*
	//	"Positioning :" windows+=Window windows+=Window*;
	public DashboardElements getDashboardAccess() {
		return pDashboard;
	}
	
	public ParserRule getDashboardRule() {
		return getDashboardAccess().getRule();
	}

	//Visualization:
	//	name=EString ("shows" concerns+=WhatQualifier ("," concerns+=WhatQualifier)*)? "of" displays+=Source (";"
	//	displays+=Source)* ";"?;
	public VisualizationElements getVisualizationAccess() {
		return pVisualization;
	}
	
	public ParserRule getVisualizationRule() {
		return getVisualizationAccess().getRule();
	}

	//WhatQualifier:
	//	concern=Taxonomy;
	public WhatQualifierElements getWhatQualifierAccess() {
		return pWhatQualifier;
	}
	
	public ParserRule getWhatQualifierRule() {
		return getWhatQualifierAccess().getRule();
	}

	//Source:
	//	name=EString ("of type" type=EString)? ("locate at" location=EString)? ("displayed as" concerns+=HowQualifier (","
	//	concerns+=HowQualifier)*)?;
	public SourceElements getSourceAccess() {
		return pSource;
	}
	
	public ParserRule getSourceRule() {
		return getSourceAccess().getRule();
	}

	//HowQualifier:
	//	Icon | Colorization | Property | Threshold;
	public HowQualifierElements getHowQualifierAccess() {
		return pHowQualifier;
	}
	
	public ParserRule getHowQualifierRule() {
		return getHowQualifierAccess().getRule();
	}

	//Window:
	//	"view" name=EString ":" organizes+=Container ("   |   " organizes+=Container)*;
	public WindowElements getWindowAccess() {
		return pWindow;
	}
	
	public ParserRule getWindowRule() {
		return getWindowAccess().getRule();
	}

	//Container:
	//	("Column" {Column} | "Line" {Line}) ("sized" ponderation=EInt)? ": [" contains+=Cell (";" contains+=Cell)* "]";
	public ContainerElements getContainerAccess() {
		return pContainer;
	}
	
	public ParserRule getContainerRule() {
		return getContainerAccess().getRule();
	}

	//Cell:
	//	wraps=[Visualization];
	public CellElements getCellAccess() {
		return pCell;
	}
	
	public ParserRule getCellRule() {
		return getCellAccess().getRule();
	}

	//Icon:
	//	{Icon} "Icon";
	public IconElements getIconAccess() {
		return pIcon;
	}
	
	public ParserRule getIconRule() {
		return getIconAccess().getRule();
	}

	//Colorization:
	//	{Colorization} "Color" color=EString;
	public ColorizationElements getColorizationAccess() {
		return pColorization;
	}
	
	public ParserRule getColorizationRule() {
		return getColorizationAccess().getRule();
	}

	//Property:
	//	value=DataProperty;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Threshold:
	//	{Threshold} "Threshold (" ("min" min=EInt)? ("max" max=EInt)? ")";
	public ThresholdElements getThresholdAccess() {
		return pThreshold;
	}
	
	public ParserRule getThresholdRule() {
		return getThresholdAccess().getRule();
	}

	//enum DataProperty:
	//	Continuous | Discrete | Scalar | Structural;
	public DataPropertyElements getDataPropertyAccess() {
		return unknownRuleDataProperty;
	}
	
	public EnumRule getDataPropertyRule() {
		return getDataPropertyAccess().getRule();
	}

	//enum Taxonomy:
	//	Proportion | Location | Comparison | Part_to_a_whole | Relationship | Over_time | Distribution | Hierarchy |
	//	Reference_tool | Range | Pattern | Extremum;
	public TaxonomyElements getTaxonomyAccess() {
		return unknownRuleTaxonomy;
	}
	
	public EnumRule getTaxonomyRule() {
		return getTaxonomyAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//EInt returns ecore::EInt:
	//	"-"? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
